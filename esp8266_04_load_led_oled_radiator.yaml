esphome:
  name: esp8266_led_oled
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret ssid_iot
  password: !secret password_iot
  fast_connect: on
  manual_ip:
    static_ip: 192.168.0.83
    gateway: !secret gateway
    subnet: 255.255.255.0


logger:
  level: WARN


api:
  password: !secret ota_password

ota:
  password: !secret ota_password

i2c:
  sda: D2
  scl: D3
  scan: False



font:
  - file: 'fonts/arial.ttf' #'slkscr.ttf'
    id: font1
    size: 12
    glyphs: '!\/"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzß'

  - file: 'fonts/BebasNeue-Regular.ttf'
    id: font2
    size: 48

  - file: 'fonts/arial.ttf'
    id: font3
    size: 18

  - file: 'fonts/arial.ttf'
    id: font4
    size: 14

  - file: 'fonts/arial.ttf'
    id: font5
    size: 48
  - file: 'fonts/arial.ttf'
    id: font6
    size: 32

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
    id: my_display
    pages:
      - id: page0
        lambda: |-
          if (id(radiator_temperature).has_state()) {
            it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Temp./Leistung WKS");
            it.printf(0, 30, id(font3), TextAlign::BASELINE_LEFT, "%.1f °C", id(radiator_temperature).state);
            it.printf(0, 60, id(font3), TextAlign::BASELINE_LEFT, "%.0f Watt", id(wks_load).state);
          } else {
          it.printf(0, 0, id(font1), TextAlign::TOP_LEFT, "Warte auf Daten....");
          }
      - id: page1
        lambda: |-
          if (id(radiator_temperature).has_state()) {
            it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Temperatur Radiator");
            it.printf(0, 60, id(font6), TextAlign::BASELINE_LEFT, "%.1f  °C", id(radiator_temperature).state);
          } else {
          it.printf(0, 0, id(font1), TextAlign::TOP_LEFT, "Warte auf Daten....");
          }

      - id: page2
        lambda: |-
          if (id(wks_load).has_state()) {
            it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Leistung WKS");
            it.printf(0, 60, id(font6), TextAlign::BASELINE_LEFT, "%.0f Watt", id(wks_load).state);
          } else {
          it.printf(0, 0, id(font1), TextAlign::TOP_LEFT, "Warte auf Daten....");
          }


time:
  - platform: homeassistant
    id: timeha



sensor:
  - platform: wifi_signal
    name: "esp8266_led_oled_rssi"
    update_interval: 60s

  - platform: uptime
    name: "esp8266_led_oled_uptime"
    update_interval: 20s

  - platform: homeassistant
    id: carport_temperature
    entity_id: sensor.esp32_03_temperature
    internal: true

  - platform: homeassistant
    id: haupteingang_temperature
    entity_id: sensor.esp32_02_temperature
    internal: true

  - platform: homeassistant
    id: radiator_temperature
    entity_id: sensor.esp32_7_temp
    internal: true

  - platform: homeassistant
    id: wks_load
    entity_id: sensor.sonoff02_momentane_leistung
    internal: true

binary_sensor:
  - platform: status
    name: "esp8266_led_oled_status"
  - platform: gpio
    pin: GPIO0
    name: "Toggle Button"
    on_press:
      then:
        - display.page.show_next: my_display
        - component.update: my_display
web_server:
  port: 80




switch:
  - platform: restart
    name: "esp8266_led_oled_restart"
  - platform: shutdown
    name: "esp8266_led_oled_shutdown"
  - platform: output
    name: "rote_led"
    output: 'rote_led'
  - platform: output
    name: "gelbe_led"
    output: 'gelbe_led'
  - platform: output
    name: "gruene_led"
    output: 'gruene_led'
    id: bla

output:
  - platform: gpio
    pin: D7
    id: 'rote_led'
  - platform: gpio
    pin: D6
    id: 'gelbe_led'
  - platform: gpio
    pin: D5
    id: 'gruene_led'
